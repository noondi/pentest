#!/bin/bash
RESET='\033[00m'; # No Color
LRED='\033[1;31m';
ORANGE='\033[0;33m';
LGREEN='\033[1;32m';
GREEN='\033[0;32m';
cmdTITLE='';
cmdRESPONSE='';

# this script was tested on some debian, rhet and slackware distros
# use at your own risk

operatingSYSTEM(){
  cmdTITLE="OPERATING SYSTEM";
  cmdSTATUStitle;

  # distribution
  cmdSUBTITLE="Distribution";
  cmdRESPONSE=$(/bin/cat /etc/*-release 2>&1;);
  cmdSTATUSsubtitle;

  # kernel
  cmdSUBTITLE="Kernel";
  cmdRESPONSE=$(if [ -f /proc/version ]; then cat /proc/version 2>&1; else /bin/uname -a 2>&1; fi;);
  cmdSTATUSsubtitle;

  cmdSUBTITLE="Environment Variables";
  cmdRESPONSE=$(/usr/bin/env | /bin/grep -v "LS_COLORS" 2>&1;);
  cmdSTATUSsubtitle;

  # printer
  cmdSUBTITLE="Printer";
  cmdRESPONSE=$(/usr/bin/lpstat -a 2>&1;);
  cmdSTATUSsubtitle;
}

netWORK(){
  cmdTITLE="NETWORK";
  cmdSTATUStitle;

  # nic
  cmdSUBTITLE="Network Interfaces";
  cmdRESPONSE=$(if [ -f /bin/ifconfig ]; then /bin/ifconfig 2>&1; else /bin/ip a 2>&1; fi;);
  cmdSTATUSsubtitle;

  # dns resolver
  cmdSUBTITLE="DNS Resolver";
  cmdRESPONSE=$(/bin/cat /etc/resolv.conf 2>&1;);
  cmdSTATUSsubtitle;

  # hostname
  cmdSUBTITLE="Hostname";
  cmdRESPONSE=$(/bin/hostname 2>&1;);
  cmdSTATUSsubtitle;
}

userACCOUNTS(){
  cmdTITLE="USERS";
  cmdSTATUStitle;

  # who logged last on the system
  cmdSUBTITLE="All users";
  cmdRESPONSE=$(/bin/cat /etc/passwd);
  cmdSTATUSsubtitle;

  # list id
  cmdSUBTITLE="My ID";
  cmdRESPONSE=$(/usr/bin/id);
  cmdSTATUSsubtitle;

  # who is on the system
  cmdSUBTITLE="Who's logged right now";
  cmdRESPONSE=$(/usr/bin/who; w);
  cmdSTATUSsubtitle;

  # who logged last
  cmdSUBTITLE="Who's logged last";
  cmdRESPONSE=$(/usr/bin/last);
  cmdSTATUSsubtitle;

  # list super users
  cmdSUBTITLE="Super users";
  cmdRESPONSE=$(cat /etc/passwd | /usr/bin/awk -F: '($3 == 0) { print $1 }');
  cmdSTATUSsubtitle;

  # list shadow file
  cmdSUBTITLE="Shadow file";
  cmdRESPONSE=$(cat /etc/shadow);
  cmdSTATUSsubtitle;
}

fileSYSTEMS(){
  cmdTITLE="FILE SYSTEMS";
  cmdSTATUStitle;

  # checking root's home folder
  cmdSUBTITLE="root's home folder accessibility";
  cmdRESPONSE=$();
  cmdSTATUSsubtitle;

  # list world writeable directories owned by root
  cmdSUBTITLE="World Writeables Directories for User/Group 'root'";
  cmdRESPONSE=$();
  cmdSTATUSsubtitle;

  # list world writeable directories owned by other usersroot
  cmdSUBTITLE="World Writeables Directories for Users (!root)";
  cmdRESPONSE=$();
  cmdSTATUSsubtitle;

  # list world writeable files
  cmdSUBTITLE="World Writeables Files";
  cmdRESPONSE=$();
  cmdSTATUSsubtitle;

  # SUI/SGID files and directories


  # logs containing keyword 'password'


  # config files containing keyword 'password'
}

applicationSERVICES(){
  cmdTITLE="APPLICATIONS & SERVICES";
  cmdSTATUStitle;

  # installed packages

  # list running services
  cmdSUBTITLE="Running Services";
  cmdRESPONSE=$(if [ -f /bin/ps ]; then /bin/ps aux 2>&1; else /bin/cat /etc/services 2>&1; fi;);
  cmdSTATUSsubtitle;

  # list sudo version


  # list processes and packages running as root or other superuser


  # look for installed tools
}

cmdSTATUStitle(){
  echo -e "${LGREEN}=============================================";
  echo -e "${LGREEN}[*] $cmdTITLE...";
  echo -e "${LGREEN}=============================================${RESET}";
  printf "\n";
  sleep 1.5s;
}

cmdSTATUSsubtitle(){
  if [ $? -eq 0 ]; then
    echo -e "${LGREEN}[+] $cmdSUBTITLE${GREEN}";
    printf "$cmdRESPONSE\n\n";
  else
    echo -e "${LRED}[!] $cmdSUBTITLE${ORANGE}";
    printf "$cmdRESPONSE\n\n";
  fi
  sleep 3s;
}

start(){
  operatingSYSTEM;
  netWORK;
  userACCOUNTS;
  fileSYSTEMS;
  applicationSERVICES;
}

start;

#
# lookupBIN(){
#   if [[ -e /bin/$1 ]]; then
#     /bin/$1 $2;
#   elif [[ -e /sbin/$1 ]]; then
#     /sbin/$1 $2;
#   elif [[ -e /usr/bin/$1 ]]; then
#     /usr/bin/$1 $2;
#   elif [[ -e /usr/local/$1 ]]; then
#     /usr/local/$1 $2;
#   elif [[ -e /usr/local/bin/$1 ]]; then
#     /usr/local/bin/$1 $2;
#   elif [[ -e /urs/local/sbin/$1 ]]; then
#     /urs/local/sbin/$1 $2;
#   else
#     echo $1": command not found";
#     # this is to give me a fail status
#     fdsafsda 2>/dev/null;
#   fi
# }
